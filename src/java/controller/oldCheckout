
package controller;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import dto.User_DTO;
import entity.Address;
import entity.Cart;
import entity.City;
import entity.InvoiceHasProducts;
import entity.OrderStatus;
import entity.Invoice;
import entity.Product;
import entity.User;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import model.HibernateUtil;
import model.Validations;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import model.Payhere;
import util.config;

@WebServlet(name = "Checkout", urlPatterns = {"/Checkout"})
public class Checkout extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Gson gson = new Gson();

        JsonObject responsejsonObject = new JsonObject();
        responsejsonObject.addProperty("success", false);

        HttpSession httpsession = request.getSession();
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        if (httpsession.getAttribute("user") != null) {

            //get user from db
            String UserEmail = request.getSession().getAttribute("user").toString();
            Criteria criteria1 = session.createCriteria(User.class);
            criteria1.add(Restrictions.eq("email", UserEmail));
            User user = (User) criteria1.uniqueResult();
            if (user.getFname() == null || user.getLname() == null || user.getMobile() == null) {
                responsejsonObject.addProperty("content", "Add Your name,Mobile to Profile");
            } else {
                Criteria AddressCriteria = session.createCriteria(Address.class);
                AddressCriteria.add(Restrictions.eq("user", user));
                AddressCriteria.setMaxResults(1);
                List<Address> addressList = AddressCriteria.list(); // Safely handle the list

                if (!addressList.isEmpty()) {
                    Address address = addressList.get(0);
                JsonObject responseObject2 = saveOrders(session, transaction, user, address, responsejsonObject);
                
                if(responseObject2 != null){
//                                    responsejsonObject.addProperty("payhere", gson.toJson(responseObject2));
//                    System.out.println("payhere"+gson.toJson(responseObject2));
                }else{
                    System.out.println("|| saveOrder returned null || ");
                }
                } else {
                    responsejsonObject.addProperty("content", "Add Your Delivery Address to Profile");
                }
            }

        }
        response.setContentType("application/json");
        response.getWriter().write(gson.toJson(responsejsonObject));
        session.close();
        System.out.println("");
    }

    private JsonObject saveOrders(Session session, Transaction transaction, User user, Address address, JsonObject responsejsonObject) {
        try {
            Gson gson = new Gson();
            //Get Cart Order
            Criteria criteria4 = session.createCriteria(Cart.class);
            criteria4.add(Restrictions.eq("user", user));
            List<Cart> cartList = criteria4.list();
            Double TotalAmount = 0.00;
            if (!cartList.isEmpty()) {
                //create order in DB

                for (Cart cart : cartList) {
                    TotalAmount = TotalAmount + cart.getProduct().getPrice() * cart.getQty() + cart.getProduct().getDeliveryFee();
                }

                Invoice invoice = new Invoice();
//            order.set(address);
                invoice.setOrderId(Validations.generateOrderId());
                invoice.setDate(new Date());
                invoice.setUser(user);
                invoice.setTotal(TotalAmount);
                int order_id = (int) session.save(invoice);
                session.save(invoice);

                //get order (1.paid) from DB
//            Invoice invoice2 = (Invoice) session.get(Invoice.class, 5);
                Criteria invoiceCriteria = session.createCriteria(Invoice.class);
                invoiceCriteria.add(Restrictions.eq("user", user));
                invoiceCriteria.add(Restrictions.eq("invoiceId", invoice.getInvoiceId()));
                Invoice invoice2 = (Invoice) invoiceCriteria.uniqueResult();

                String items = "";
                //create order Item in DB
                for (Cart cartItem : cartList) {

                    items += cartItem.getProduct().getTitle();

                    Product product = cartItem.getProduct();

                    InvoiceHasProducts invoiceHasProducts = new InvoiceHasProducts();
//                invoiceHasProducts.setInvoice(invoice);
                    invoiceHasProducts.setInvoice(invoice);
                    invoiceHasProducts.setProduct(product);
                    invoiceHasProducts.setBoughtQty(cartItem.getQty());
                    invoiceHasProducts.setOrderStatus(1);
                    session.save(invoiceHasProducts);
                    System.out.println("invoiceHasProduct addded :::" + gson.toJson(invoiceHasProducts));
                    //update Product in DB
                    product.setQty(product.getQty() - cartItem.getQty());
                    session.update(product);

                    //Delete cart Item from DB
                    session.delete(cartItem);

                }
                transaction.commit();
                String fullAddress = address.getLine1() + "," + address.getLine2() + "," + address.getCity().getCityName();
                System.out.println("address addded :::" + fullAddress);

                //Start : Set Payment Data
                String merchant_id = config.MERCHANT_ID;
                String formatedAmount = new DecimalFormat("0.00").format(TotalAmount);
                String currency = "LKR";
                String formattedAmount = new DecimalFormat("0.00").format(TotalAmount);
                String merchantSecret = config.MERCHANT_SECRET;
                String merchantSecretMD5Hash = Payhere.generateMD5(merchantSecret);
                JsonObject payhereObject = new JsonObject();

                payhereObject.addProperty("merchant_id", merchant_id);
                payhereObject.addProperty("return_url", "");
                payhereObject.addProperty("cancel_url", "");
                payhereObject.addProperty("notify_url", "");
                payhereObject.addProperty("first_name", user.getFname());
                payhereObject.addProperty("last_name", user.getLname());
                payhereObject.addProperty("email", user.getEmail());
                payhereObject.addProperty("phone", user.getMobile());
                payhereObject.addProperty("address", fullAddress);
                payhereObject.addProperty("city", address.getCity().getCityName());
                payhereObject.addProperty("country", "Sri Lanka");
                payhereObject.addProperty("order_id", String.valueOf(invoice2.getOrderId()));
                payhereObject.addProperty("items", items);
                payhereObject.addProperty("currency", currency);
                payhereObject.addProperty("amount", formattedAmount);
                payhereObject.addProperty("sandbox", true);

                String md5Hash = Payhere.generateMD5(merchant_id + invoice2.getOrderId() + formatedAmount + currency + merchantSecretMD5Hash);
                payhereObject.addProperty("hash", md5Hash);
                System.out.println("payhere object :::" + gson.toJson(payhereObject));

                //ENd : End Payment Data
                responsejsonObject
                        .addProperty("success", true);
                responsejsonObject.addProperty("content", "Checkout Completed");
                System.out.println("payhere Objet :: " + gson.toJsonTree(payhereObject));
              responsejsonObject.add("payhereList", gson.toJsonTree(payhereObject));
            
              
              return responsejsonObject;
            } else {
                responsejsonObject.addProperty("content", "NoCart");
                System.out.println("No cart :: ");

            }

        } catch (Exception e) {
            transaction.rollback();
            System.out.println("Error on saveOrders method "+e);
        }
        return null;
    }

}
